---
- name: 'find if kube-apiserver manifest is present'
  stat:
    path: '{{ apiserver_manifest }}'
  register: apiserver_manifest_stat

- name: 'get content of kube-apiserver manifests'
  slurp:
    path: '{{ apiserver_manifest }}'
  when: apiserver_manifest_stat.stat.exists|bool
  register: apiserver_manifest_content

- name: 'find node with manifests (more likely to be running)'
  set_fact:
    cp_running_hosts: >-
      {{ ansible_play_hosts|zip(ansible_play_hosts
           |map("extract", hostvars, ['apiserver_manifest_stat', 'stat', 'exists'])
         )|selectattr('1')|map(attribute='0')|list }}

- debug:
    var: cp_running_hosts
    verbosity: 1

- name: 'get version of kubeadm package'
  package_facts:

- debug:
    var: packages.kubeadm
    verbosity: 1

- name: 'Look at kubeadm-config'
  import_tasks: kubeadm_config.yml

# Look at the current version of kubernete (ex: 1.17.8)
# Then look at possible version of kubeadm that match this version (ex: 1.17.8-01)
# Retain the kubeadm if match found, fallback on kubernetes otherwise
# Last fallback is the default version, if no cluster running

- name: 'Export variable for other hosts'
  set_fact:
    kube_version: >-
      {% if target_version %}
        {%- set kubeadm_match = ansible_play_hosts
               |map('extract', hostvars, ['packages', 'kubeadm', 0, 'version'])
               |select('match', target_version ~ '.*')|list -%}
        {%- if kubeadm_match|length > 0 -%}
          {{ kubeadm_match|first }}
        {%- else -%}
          {{ target_version }}
        {%- endif -%}
      {%- else -%}
        {{ kube_version }}
      {%- endif -%}
