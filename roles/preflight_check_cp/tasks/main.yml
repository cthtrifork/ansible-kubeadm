---
- name: 'Get version of kubeadm package'
  package_facts:

- name: 'Display information about all packages'
  debug:
    var: packages
    verbosity: 1

# Look at the current version of kubernetes (ex: 1.17.8)
# Then look at possible version of kubeadm that match this version (ex: 1.17.8-01)
# Retain the kubeadm version if match found, fallback on kubernetes otherwise
# Last fallback is the default version, if no cluster running
- name: 'Export variable for other hosts'
  set_fact:
    _target_kubeadm_version: '{{ _kubeadm_version }}'
  vars:
    _kubeadm_version: >-
      {%- set kubeadm_match = ansible_play_hosts
           |map('extract', hostvars, ['packages', 'kubeadm', 0, 'version'])
           |map('default')|select('match', _target_kube_version ~ '.*')|list -%}
      {%- if kubeadm_match|length > 0 -%}
        {{ kubeadm_match|first }}
      {%- else -%}
        {{ _target_kube_version }}
      {%- endif -%}

- name: 'Display wanted version of kubeadm'
  debug:
    var: _target_kubeadm_version

- import_tasks: check_version.yml

- import_tasks: check_control_plane_endpoint.yml

- import_tasks: check_control_plane_health.yml
  run_once: true
  delegate_to: '{{ groups.cp_running|first }}'
  when:
    - groups.cp_running|default([])|length > 0
    - not cp_health_check_bypass|bool
