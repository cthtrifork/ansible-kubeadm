---
- name: 'Find if kube-apiserver manifest is present'
  stat:
    path: '{{ apiserver_manifest }}'
  register: apiserver_manifest_stat

- name: 'Get content of kube-apiserver manifests'
  slurp:
    path: '{{ apiserver_manifest }}'
  when: apiserver_manifest_stat.stat.exists|bool
  register: apiserver_manifest_content

- name: 'Get version of kubeadm package'
  package_facts:

- debug:
    var: packages.kubeadm
    verbosity: 1

- name: 'Find node with manifests (more likely to be running)'
  set_fact:
    cp_running_hosts: >-
      {{ ansible_play_hosts|zip(ansible_play_hosts
           |map("extract", hostvars, ['apiserver_manifest_stat', 'stat', 'exists'])
         )|selectattr('1')|map(attribute='0')|list }}

- debug:
    var: cp_running_hosts
    verbosity: 1

- name: 'Look at kubeadm-config'
  import_tasks: kubeadm_config.yml

# Look at the current version of kubernetes (ex: 1.17.8)
# Then look at possible version of kubeadm that match this version (ex: 1.17.8-01)
# Retain the kubeadm version if match found, fallback on kubernetes otherwise
# Last fallback is the default version, if no cluster running
- name: 'Export variable for other hosts'
  set_fact:
    target_kube_version: '{{ _kube_version }}'
    target_kubeadm_version: '{{ _kubeadm_version }}'
  vars:
    _kube_version: >-
      {%- if current_cp_version -%}
        {%- if current_cp_version|regex_search(kube_version ~ '.*') or not kube_version -%}
           {{ current_cp_version }}
        {%- else -%}
           {{ kube_version|default(default_kube_version, true) }}
        {%- endif -%}
      {%- else -%}
        {{ kube_version|default(default_kube_version, true) }}
      {%- endif -%}
    _kubeadm_version: >-
      {%- set kubeadm_match = ansible_play_hosts
           |map('extract', hostvars, ['packages', 'kubeadm', 0, 'version'])
           |select('match', _kube_version ~ '.*')|list -%}
      {%- if kubeadm_match|length > 0 -%}
        {{ kubeadm_match|first }}
      {%- else -%}
        {{ _kube_version }}
      {%- endif -%}

- debug:
    var: target_kube_version

- debug:
    var: target_kubeadm_version

- name: 'Check that version upgrade is one step'
  fail:
    msg: 'Version upgrade is not allowed: {{ current_cp_version }} => {{ target_kube_version }}'
  when:
    - current_cp_version|length > 0
    - (current_major != target_major) or (current_minor|int - target_minor|int)|abs > 1
  vars:
    current_version_split: '{{ (current_cp_version|regex_findall("(?:\d+)"))[0:2] }}'
    current_major: '{{ current_version_split|first }}'
    current_minor: '{{ current_version_split|last }}'
    target_version_split: '{{ (target_kube_version|regex_findall("(?:\d+)"))[0:2] }}'
    target_major: '{{ target_version_split|first }}'
    target_minor: '{{ target_version_split|last }}'
